
#Selected Code for: Host identity is the dominant factor in the assembly of nematode and tardigrade gut microbiomes in Antarctic Dry Valley streams  

#Line 15-106: 16s and 18s metabarcoding in Qiime2 (to create ASV tables from raw reads)
#Line 107-135 Load R libraries
#Line 137-230 Community processing (to import ASV table into Phyloseq and manipulate)
#Line 231-264 Generate Alpha Diversity Metrics
#Line 266-329 Statistics on community table
#Line 340-920 Figure creation







######16s Metabarcoding Pipeline in Qiime2######
#activate Qiime environment 
source activate qiime2-2019.7

#Import forward only reads into qiime
qiime tools import --type 'SampleData[SequencesWithQuality]' --input-path /home/uflJPM/jparrufl/Spring21/P16onlyf --input-format CasavaOneEightSingleLanePerSampleDirFmt --output-path demux01.qza

#Visualize the imported reads for quality and decide where to trim primer.  
qiime demux summarize --i-data demux01.qza --o-visualization demux01.qzv

#Trim primers based on chosen location from quality plot 
qiime cutadapt trim-single --i-demultiplexed-sequences deomux01.qza --p-cores 12 --p-adapter ATTAGAWACCCBDGTAGTCC --p-front GTGCCAGCMGCCGCGGTAA  --o-trimmed-sequences trimmed-seqs2.qza --verbose

#Visualize to confirm that they trimmed because cutadapt is very particular
qiime demux summarize --i-data trimmed-seqs2.qza --o-visualization trimmed-seqs2.qzv

#Run the DADA pipleine to create 100% ASVs, Nohup just lets you run it in the background. 
nohup qiime dada2 denoise-single --i-demultiplexed-seqs trimmed-seqs2.qza --output-dir otu-dada2 --p-trim-left 0 --p-trunc-len 196 --p-n-threads 0 &
  
#Visualize DATA quality checking % loss at each step
qiime metadata tabulate --m-input-file otu-dada2/denoising_stats.qza --o-visualization stats

#Generate representative sequences file
qiime feature-table tabulate-seqs --i-data otu-dada2/representative_sequences.qza --o-visualization rep-seqs

#Add metadata if you want to explore using built in qiime tools, this step is optional
qiime feature-table summarize --i-table otu-dada2/table.qza --m-sample-metadata-file /home/uflJPM/jparrufl/Spring21/All_97paired/Mappingall16s.txt   --o-visualization tableFT

#Convert ASV table into a TSV file that you can easily work with in R
qiime tools export --input-path otu-dada2/table.qza --output-path exported-feature-table
cd exported-feature-table
biom convert -i feature-table.biom -o ExportTable.tsv --to-tsv

cd.. 

#Convert representative sequences file into a .fasta format. 
qiime tools export --input-path otu-dada2/representative_sequences.qza --output-path otu-dada2

#Assign taxonomy against Blast 
cd otu-dada2
source activate qiime1
export BLASTMAT=$HOME/Software/blast-2.2.22/data
nohup assign_taxonomy.py -i dna-sequences.fasta -r /home/genome/egendron/Projects/v138/uclust_stable/no-uncultured_ids.list_formatted_v138_again.fasta -t /home/genome/egendron/Projects/v138/uclust_stable/taxonomy_id_map.txt -o nounassigned &

#Now you have the otu table, the representative sequences file and taxonomy string file, use these three for further analysis.  
  
  
######18s Metabarcoding Pipeline in Qiime2######
#Import reads into qiime
qiime tools import --type 'SampleData[PairedEndSequencesWithQuality]' --input-path /home/uflJPM/jparrufl/Summer21/NewPlate3Reads --input-format CasavaOneEightSingleLanePerSampleDirFmt --output-path demux01.qza

#Visualize the imported reads for quality and decide where to trim primer.  
qiime demux summarize --i-data demux01.qza --o-visualization demux01.qzv

#Trim primers
nohup qiime cutadapt trim-paired \
--i-demultiplexed-sequences demux01.qza \
--p-cores 16 \
--p-adapter-f GTACACACCGCCCGTC...GTAGGTGAACCTGCAGAAGGATCA \
--p-adapter-r TGATCCTTCTGCAGGTTCACCTAC...GACGGGCGGTGTGTAC \
--o-trimmed-sequences 18strimmedk2.qza  \
--verbose &
  
#Visualize the object to make sure you trimmed the primers off correctly 
qiime demux summarize --i-data 18strimmedk2.qza --o-visualization 18strimmedk2.qzv


#Run the DADA pipleine to create 100% ASVs, Nohup just lets you run it in the background. 
nohup qiime dada2 denoise-paired --i-demultiplexed-seqs 18strimmedk2.qza  --output-dir otu-dada7 --p-trim-left-f 0 --p-trim-left-r 0 --p-trunc-len-f 125 --p-trunc-len-r 125 --p-n-threads 0 &
  
  
#Visualize DATA quality checking % loss at each step
qiime metadata tabulate --m-input-file otu-dada7/denoising_stats.qza --o-visualization stats

#Generate representative sequences file
qiime feature-table tabulate-seqs --i-data otu-dada7/representative_sequences.qza --o-visualization rep-seqs

#Convert ASV table into a TSV file that you can easily work with in R
qiime tools export --input-path otu-dada7/table.qza --output-path exported-feature-table
cd exported-feature-table
biom convert -i feature-table.biom -o ExportTable.tsv --to-tsv

cd.. 

#Convert representative sequences file into a .fasta format. 
qiime tools export --input-path otu-dada7/representative_sequences.qza --output-path otu-dada7
  
#Assign taxnomy 
nohup blastn -query dna-sequences.fasta -subject /home/genome/egendron/Projects/v138/no_env_no_uncult_seqs/seqs_noenv_nouncult_edit1.fasta -out blastn_resultsotu4LIdatabasenoenvoANDNOcunclutededit1.txt -max_target_seqs 1 -outfmt "6 qseqid sseqid qlen slen pident qcovs mismatch length gaps qstart qend sstart send bitscore evalue staxids" &
  
  

###### Now in R, activate all packages used for figures and statistics######
library("ggplot2")
library("vegan")
library("DataCombine")
library("randomcoloR")
library("forcats")
library("data.table")
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
library("phyloseq")
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(car)
library(multcomp)
library(rsq)
library(glmmTMB)
library(RVAideMemoire)
library(DHARMa)
library(ggpubr)
library(ggpubr)
library(indicspecies)
library(ape)
library(ggsignif)
library(extrafont)
library(extrafontdb)

######Import 16s otu table and taxnomy into Phyloseq package and do simple filtering######

##Set working directory 
setwd("~/Desktop/FinalPipelineNoUnassigned")

#Import OTU table
RawOtu <- read.table("otu.csv",sep=",", row.names=1,header=T, check.names=F,blank.lines.skip = FALSE)
RawOtu <- RawOtu[,order(colnames(RawOtu))]
#Import Tax strings table
taxmat <- read.table("tax.csv",sep=",", header=T,  row.names=1, check.names=F,blank.lines.skip = FALSE)
#Import mapping file table
mapping <- read.table("mapingfile.csv",sep=",", header=T,  row.names=1, check.names=F,blank.lines.skip = FALSE)

##Import into phyloseq as phyloseq objects()
#otu table
onlyOTU <- as.matrix(RawOtu)
otu_sub  <- otu_table(onlyOTU, taxa_are_rows = T)
#taxnomy strings
t_tax <- as.matrix(taxmat)
tax_sub = tax_table(t_tax)
#mapping file
metadata <- sample_data(mapping)

##Create phyloseq object
PhUnmodifed<- phyloseq(otu_sub,metadata,tax_sub)
#Remove empty negative samples 
PhRemoveNeg <- subset_samples(PhUnmodifed, Animal != "Neg")
#Remove the few nematodes from soil and not mats
PhRemoveNegSoil <- subset_samples(PhRemoveNeg, Substrate == "mat")
#Remove non bacteral reads
PhOnlyBac <- subset_taxa(PhRemoveNegSoil, Domain=="Bacteria")

#filter out low read count samples
PhNotEud <- subset_samples(PhOnlyBac, Animal != "Eudorylaimus")
PhNotEud <-prune_samples(sample_sums(PhNotEud)>=100, PhNotEud)
PhOnlyEud <- subset_samples(PhOnlyBac, Animal == "Eudorylaimus")
PhOnlyEud <-prune_samples(sample_sums(PhOnlyEud)>=100, PhOnlyEud)
PhMerge <- merge_phyloseq(PhNotEud,PhOnlyEud)

##Filter so it is only microbiomes and mat samples
Bacterialcommunity <- subset_samples(PhMerge, Wash != "dirty")

#This is the 16s phyloseq object for all figure stat and alsysts
Bacterialcommunity


######Import 18s otu table and taxnomy into Phyloseq package and do simple filtering######
setwd("~/Desktop/125 dada 18s figure out/Post split/New taxnomy no uncultured")

#Import ASV table into R
RawOtu <- read.table("otu.csv",sep=",", row.names=1,header=T, check.names=F,blank.lines.skip = FALSE)
RawOtu <- RawOtu[,order(colnames(RawOtu))]
#Import tax strings  into R
taxmat <- read.table("tax.csv",sep=",", header=T,  row.names=1, check.names=F,blank.lines.skip = FALSE)
#Import mapping file into R
mapping <- read.table("mapall18withrerun.csv",sep=",", header=T,  row.names=1, check.names=F,blank.lines.skip = FALSE)

##Import ASV table into phyloseq
onlyOTU <- as.matrix(RawOtu)
otu_sub  <- otu_table(onlyOTU, taxa_are_rows = T)
##Import tax string into phyloseq
t_tax <- as.matrix(taxmat)
tax_sub = tax_table(t_tax)
##Import mapping file into phyloseq
metadata <- sample_data(mapping)

##Create phyloseq object
PhUnmodifed<- phyloseq(otu_sub,metadata,tax_sub)
#Remove negative samples (zeroed out already)
PhRemoveNeg <- subset_samples(PhUnmodifed, Animal != "Neg")
#Remove the few nematodes from soil and not mats
PhRemoveNegSoil <- subset_samples(PhRemoveNeg, Substrate == "mat")
#Only keep guts and mats
PhRemoveNegSoil <- subset_samples(PhRemoveNegSoil, Wash != "dirty")


#Remove host reads
onlyE <- subset_samples(PhRemoveNegSoil, Animal=="Eudorylaimus")
onlyE <- subset_taxa(onlyE,f!=" __Qudsianematidae")
onlyP <- subset_samples(PhRemoveNegSoil, Animal=="Plectus")
onlyP <- subset_taxa(onlyP,f!=" __Plectidae")
onlyT <- subset_samples(PhRemoveNegSoil, Animal=="Tardigrade")
onlyT <- subset_taxa(onlyT, d!=" __Tardigrada")
onlyM <- subset_samples(PhRemoveNegSoil, Animal=="Mat")
otunohost <- merge_phyloseq(onlyT, onlyP, onlyE,onlyM)
otunohost <- subset_samples(otunohost, StreamName!="Soil")

#Remove low abundance samples
otunohost <-prune_samples(sample_sums(otunohost)>=100, PhRemoveNegSoil)

#This is the 18s phyloseq object for all figure stat and alsysts
Eukcommunity


################Generate Hill Numbers Alpha Diverstiy Metrics################

#Using either Bacterialcommunity or Eukcommunity phlyoseq object


#Export the out table from the object
dat3= as(otu_table(Bacterialcommunity), "matrix")
#Transform and make into a dataframe
dat3t2 <- as.data.frame(t(dat3))
head(dat3t2)

#Make an empty dataframe to put your results into
otu_BF_div <- dat3t2[1:1]

#Calcualte hill numbers
otu_BF_div$rich <- hill_taxa(dat3t2, q=0)                                                                                               
otu_BF_div$shan <- hill_taxa(dat3t2, q=1)                                                                                               
otu_BF_div$simp <- hill_taxa(dat3t2, q=2)

#Remove that first collum of null values
otu_BF_div[1] <- NULL

#your final results
otu_BF_div

write.csv(otu_BF_div,'HillNumbers18sMat.csv')

#PD, must add tree to Bacterialcommunity or Eukcommunity file 
otu_BF_div
otu_BF_div <- dat3t2[1:1]
tree1 = phy_tree(otunohost)
otu_BF_div$faith <- hill_phylo(dat3t2,tree1, q=0)          
write.csv(otu_BF_div,'HillNumbers18sMatFaith.csv')

############## Alpha Diversity Statistics############## 

#Import the values from the last step, with the metadata next to each samples incolumns
alphadata <- read.csv("HillNumbers.csv")
alphastats <- alphadata
head(alphastats)
glm1 <- glm(Richness~ Community*MatType*Stream, data=alphastats, family=gaussian())
glm1 <- glm(Shannon~ Community*MatType*Stream, data=alphastats, family=gaussian())
glm1 <- glm(Simp~ Community*MatType*Stream, data=alphastats, family=gaussian())
glm1 <- glm(Faith~ Community*MatType*Stream, data=alphastats, family=gaussian())
Anova(glm1, type=2) 
sim_glm1 <- simulateResiduals(fittedModel = glm1, n = 250)
plot(sim_glm1)
summary(glm1)


############## Relative Abundance Statistics############## 

#Using either Bacterialcommunity or Eukcommunity phlyoseq object

#Example using "Phylum" but change to be Genus or Family as neeeded

#Export otu table abundances
ps2 <- PhOnlyClean10
ps2 <- transform_sample_counts(ps2, function(x) x / sum(x))
ps <- tax_glom(ps2, "Phylum")
ps0 <- transform_sample_counts(ps, function(x) x / sum(x))
dat2 <- data.table(psmelt(ps0))
# convert Phylum to a character vector from a factor because R
dat2$Phylum <- as.character(dat2$Phylum)
write.csv(dat2,'Phylum.csv')
ForPhil <- read.csv("Phylum.csv")
head(ForPhil)

#Subset to phyla of interest
ForPhil <- ForPhil[grepl("Proteobacteria", ForPhil$Phylum),]

#Small transform so no 0 or 1 values. (They all shift to 0.00001 and 0.999999, but doesnt change output of any inbetween stats)
ForPhil$Abundance <- (ForPhil$Abundance*(length(ForPhil$Abundance)-1)+.5)/length(ForPhil$Abundance)

ForPhil %>% group_by(Animal) %>% summarize(Abundnace=mean(Abundance,na.rm=T))
hist(ForPhil$Abundance)
pm1 <- glmmTMB(Abundance ~ Animal*Color+Color*StreamName+Animal*StreamName + (1|StreamName), data=ForPhil, family=beta_family(link="logit")  )
pm1 <- glmmTMB(Abundance ~ Animal*Color+Color*StreamName+Animal*StreamName + (1|StreamName), data=ForPhil, family=beta_family(link="logit")  )
plot(pm1)
Anova(pm1)
summary(pm1)


########## PERMANOVA only gut microbiomes#####

#Using either Bacterialcommunity or Eukcommunity phlyoseq object

PhOnlyClean10 <- subset_samples(Bacterialcommunity, Animal != "Mat")
RELPhOnlyClean10 <- transform_sample_counts(PhOnlyClean10, function(x) x / sum(x))
#Get metadata from the phyloseq object
sampledf <- data.frame(sample_data(RELPhOnlyClean10))
#Ordinate 
wunifrac_dist = phyloseq::distance(RELPhOnlyClean10, method="bray", weighted=F)
#Run PERMANOVA
adonis(wunifrac_dist ~ Community*Mat*Stream, data = sampledf, permutations = 9999)


########## PERMANOVA only mats#####

#Using either Bacterialcommunity or Eukcommunity phlyoseq object
PhOnlyClean10 <- subset_samples(Bacterialcommunity, Animal == "Mat")
RELPhOnlyClean10 <- transform_sample_counts(PhOnlyClean10, function(x) x / sum(x))
#Get metadata from the phyloseq object
sampledf <- data.frame(sample_data(RELPhOnlyClean10))
#Ordinate 
wunifrac_dist = phyloseq::distance(RELPhOnlyClean10, method="bray", weighted=F)
#Run PERMANOVA
adonis(wunifrac_dist ~ Mat*Stream, data = sampledf, permutations = 9999)

############## Figure 2##########


AlphaForPhilNoUncultWithMetadata <- read.csv("~/Desktop/FinalPipelineNoUnassigned/HillNumbers.csv")
alphadata <- AlphaForPhilNoUncultWithMetadata
alphadata$SpeciesIDMatType <- factor(alphadata$SpeciesIDMatType,levels = c( "MatBlack", "MatOrange", "EudorylaimusBlack", "EudorylaimusOrange",
                                                                            "PlectusBlack", "PlectusOrange","TardigradeBlack","TardigradeOrange" ))
p <- ggplot(alphadata, aes(x=SpeciesIDMatType, y=Shannon,fill=MatType)) +    geom_boxplot()
p <- p +theme_classic(15,) + ylab("Shannon Diversity Index of Bacterial Communities \n (Hill Numbers)") 
p <- p+ geom_signif(comparisons = list(c("MatBlack", "MatOrange")), annotation="a",tip_length = 0,  y_position = c(125)) + geom_signif(comparisons = list(c("TardigradeBlack", "TardigradeOrange")), annotation="b", tip_length = 0, y_position = c(45)) + geom_signif(comparisons = list(c("PlectusBlack", "PlectusOrange")), annotation="c", tip_length = 0, y_position = c(35)) + geom_signif(comparisons = list(c("EudorylaimusBlack", "EudorylaimusOrange")), tip_length = 0, annotation="d", y_position = c(25))
p <- p + theme(axis.title.x=element_blank(), axis.text.x = element_text(color="black"), axis.text.y = element_text(color="black") )
p <- p + scale_fill_manual(values=c("gray50", "#ff7800")) +scale_x_discrete(labels = c('Black Mat','Orange Mat', expression(italic("E. antarcticus")),expression(italic("E. antarcticus")),expression(italic("P. murrayi")), expression(italic("P. murrayi")),  'Tardigrada','Tardigrada'    ))  + theme(legend.position = c(.9,.9))+ labs(fill='Mat Type') +scale_y_continuous(limits = c(0,150), expand = c(0,0))
p
myPalette <- c ( "black", "#ff7800", "black", "#ff7800","black", "#ff7800","black", "#ff7800")
p <- p + theme(axis.text.x = element_text(colour=myPalette))
Shannon <- p + theme(axis.text.x = element_text(angle = 25, hjust=1))
Shannon +   geom_signif(comparisons = list(c("MatBlack", "MatOrange")))
Shannon


###############Figure 3##########

#graph per animal all phyla
ph4<- PhOnlyClean10
ph4 <-prune_samples(sample_sums(ph4)>=1, ph4)
ps4<- transform_sample_counts(ph4, function(x) x / sum(x))
ps <- tax_glom(ps4, "Phylum")
ps0 <- transform_sample_counts(ps, function(x) x / sum(x))
ps1 <- merge_samples(ps0, "AnimalColor")
#account for uneven numbersZ
ps2 <- transform_sample_counts(ps1, function(x) x / sum(x))
dat2 <- data.table(psmelt(ps2))
# convert Phylum to a character vector from a factor because R
dat2$Phylum <- as.character(dat2$Phylum)
# group dataframe by Phylum, calculate median rel. abundance
dat2[, median := median(Abundance, na.rm = TRUE), 
     by = "Phylum"]
# Change name to remainder of Phylum less than 1%
dat2[(median <= 0.0035), Phylum := "Other Phyla "]
dat2$Sample <- factor(dat2$Sample, levels = c(
  "Mat_Black",
  "Mat_Orange",
  "Tardigrade_Black",
  "Tardigrade_Orange",
  "Plectus_Black",
  "Plectus_Orange",
  "Eudorylaimus_Black",
  "Eudorylaimus_Orange"
))

#write.csv(dat2,'forordering.csv')

dat2$Phylum <- factor(dat2$Phylum, levels = c(
  "Other Phyla ", 
  "Firmicutes", 
  "Bdellovibrionota", 
  "Acidobacteriota", 
  "Actinobacteriota", 
  "Myxococcota", 
  "Chloroflexi", 
  "Planctomycetota", 
  "Verrucomicrobiota", 
  "Bacteroidota", 
  "Proteobacteria", 
  "Cyanobacteria"
  
))

palette <- c( "#54555a", "#E7C144", "#D68092", "#CFE47E", "#7C8BA6" ,"#ACAC9A" ,"#B6E7D9", "#774C64", "#e79f55", "#4496e1", "#E44F9C", "#73E754" ,"#69E79B", "#73C8DC", "#E1A3DB", "#5DA3E9",
              "#E7E2B0", "#885CD9", "#DA84DF", "#ACE4AA", "#DCDFE2", "#DCC1DC", "#E2AB92", "#8B38EA", "#D53D58", "#76A562", "#DDEE44", "#7874D1" ,"#DC47DA") #oldproeti E67A4C
edes2 <- ggplot(dat2, aes(x = Sample, y = Abundance, fill = Phylum)) + geom_bar( stat = "identity")  + theme_classic(15) + scale_fill_manual(values=palette) ##was classic 22 ##chang back to 15
allphyla <-  edes2 + theme(legend.position="bottom", axis.title.x=element_blank(),axis.text.x = element_text(color="black", margin = margin(t = 2)),axis.text.y = element_text(color="black")  )  + ylab("Relative Abundance") + labs(fill='Bacteria Phyla') +  scale_y_continuous(expand = c(0,0)) +scale_x_discrete( labels = c('Black Mat','Orange Mat','Tardigrade','Tardigrade','Plectus','Plectus','Eudorylaimus','Eudorylaimus'))
myPalette <- c ( "black", "#ff7800", "black", "#ff7800","black", "#ff7800","black", "#ff7800")
allphyla <- allphyla + theme(axis.text.x = element_text(colour=myPalette))
allphyla <- allphyla + theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 25, hjust = 1)) #chang legenge back to 10 legend title 15
#allphyla <- allphyla + theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 25, hjust = 1)) 
allphyla <- allphyla + guides(fill = guide_legend(reverse = TRUE))
allphyla 



#graph per animal, genus now, only cyanos
ph4<- PhOnlyClean10
ph4 <-prune_samples(sample_sums(ph4)>=1, ph4)
ps4<- transform_sample_counts(ph4, function(x) x / sum(x))
ps <- tax_glom(ps4, "Genus")
ps0 <- transform_sample_counts(ps, function(x) x / sum(x))
ps1 <- merge_samples(ps0, "AnimalColor")
#account for uneven numbersZ
ps2 <- transform_sample_counts(ps1, function(x) x / sum(x))
ps2 <- subset_taxa(ps2, Phylum=="Cyanobacteria")
dat2 <- data.table(psmelt(ps2))
# convert Phylum to a character vector from a factor because R
dat2$Genus <- as.character(dat2$Genus)
# group dataframe by Phylum, calculate median rel. abundance
dat2[, median := median(Abundance, na.rm = TRUE), 
     by = "Genus"]

onlyPhormidium <- dat2[dat2$Genus == 'Phormidium']
onlyPhormidium$median <- 12
noPhormidium <- dat2[dat2$Genus != 'Phormidium']
dat2 <- rbind(onlyPhormidium, noPhormidium)



onlyPhormidium <- dat2[dat2$Genus == 'Candidatus']
onlyPhormidium$median <- 0
noPhormidium <- dat2[dat2$Genus != 'Candidatus']
dat2 <- rbind(onlyPhormidium, noPhormidium)

onlyPhormidium <- dat2[dat2$Genus == 'Synechococcus']
onlyPhormidium$median <- 0
noPhormidium <- dat2[dat2$Genus != 'Synechococcus']
dat2 <- rbind(onlyPhormidium, noPhormidium)

# Change name to remainder of Phylum less than 1%
dat2[(median <= 0.00000000000000099), Genus := "Other Genera "]
dat2$Sample <- factor(dat2$Sample, levels = c(
  "Mat_Black",
  "Mat_Orange",
  "Tardigrade_Black",
  "Tardigrade_Orange",
  "Plectus_Black",
  "Plectus_Orange",
  "Eudorylaimus_Black",
  "Eudorylaimus_Orange"
))

#0.00000000000000099

#write.csv(dat2,'fororderingcyano.csv')

dat2$Genus <- factor(dat2$Genus, levels = c(
  "Other Genera ", 
  "Calothrix", 
  "Pseudanabaena", 
  "Geitlerinema", 
  "Wilmottia", 
  "Kamptonema", 
  "Scytonema", 
  "Phormidium", 
  "Tychonema", 
  "Nostoc"
  
))

#"Synechococcus", 

#expression(italic("Synechococcus")), 
nopre = c(
  "Other Genera ", 
  expression(italic("Calothrix")), 
  expression(italic("Pseudanabaena")), 
  expression(italic("Geitlerinema")), 
  expression(italic("Wilmottia")), 
  expression(italic("Kamptonema")), 
  expression(italic("Scytonema")), 
  expression(italic("Phormidium")), 
  expression(italic("Tychonema")), 
  expression(italic("Nostoc"))
)

#"#BFB6D5" from escond place
palette <- c("#54555a", "#E08D4E", "#DEE24C", "#84E1A7" , "#CD9493" ,"#D1CF8C","774C64","#FFC446", "#76E25D","#236519","#BFB6D5")
# at frontD94ADC
edes2 <- ggplot(dat2, aes(x = Sample, y = Abundance, fill = Genus)) + geom_bar( stat = "identity")  + theme_classic(15) + scale_fill_manual(values=palette, labels =nopre) + theme(legend.text.align = 0)
edes2 <- edes2+ geom_signif(comparisons = list(c("Mat_Black", "Mat_Orange")), annotation="a", tip_length = 0, y_position = c(0.48) ) + geom_signif(comparisons = list(c("Tardigrade_Black", "Eudorylaimus_Orange")), tip_length = 0, annotation="b", y_position = c(0.3))
onlycyano <- edes2 + theme(axis.title.x=element_blank(),axis.text.x = element_text(color="black", margin = margin(t = 2)),axis.text.y = element_text(color="black")  )  + ylab("Relative Abundance") + labs(fill='Cyanobacteria Genera') +  scale_y_continuous(limits = c(0, 0.57), expand = c(0,0)) +scale_x_discrete(labels = c('Black Mat','Orange Mat','Tardigrade','Tardigrade','Plectus','Plectus','Eudorylaimus','Eudorylaimus'))
myPalette <- c ( "black", "#ff7800", "black", "#ff7800","black", "#ff7800","black", "#ff7800")
onlycyano <- onlycyano + theme(axis.text.x = element_text(colour=myPalette))
onlycyano <- onlycyano + theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 25, hjust = 1))  + guides(fill=guide_legend(ncol=2,reverse = TRUE))
#onlycyano <- onlycyano + ylab(expression(atop("Relative Abundance", paste("By Cyanobacteria Genus"))))
onlycyanoNoL <- onlycyano + theme(legend.position = "none") 
my_legend <- get_legend(onlycyano)
CyanoLeg<- as_ggplot(my_legend)
onlycyano




#graph per animal, genus now, only bacteria
ph4<- PhOnlyClean10
ph4 <-prune_samples(sample_sums(ph4)>=1, ph4)
ps4<- transform_sample_counts(ph4, function(x) x / sum(x))
ps <- tax_glom(ps4, "Genus")
ps0 <- transform_sample_counts(ps, function(x) x / sum(x))
ps1 <- merge_samples(ps0, "AnimalColor")
#account for uneven numbersZ
ps2 <- transform_sample_counts(ps1, function(x) x / sum(x))
ps2 <- subset_taxa(ps2, Phylum=="Bacteroidota")
dat2 <- data.table(psmelt(ps2))
# convert Phylum to a character vector from a factor because R
dat2$Genus <- as.character(dat2$Genus)
# group dataframe by Phylum, calculate median rel. abundance
dat2[, median := median(Abundance, na.rm = TRUE), 
     by = "Genus"]
# Change name to remainder of Phylum less than 1%


onlyPhormidium <- dat2[dat2$Genus == 'Heliimonas']
onlyPhormidium$median <- 12
noPhormidium <- dat2[dat2$Genus != 'Heliimonas']
dat2 <- rbind(onlyPhormidium, noPhormidium)


onlyPhormidium <- dat2[dat2$Genus == 'OLB12'] #OLB12 was word genuys
onlyPhormidium$median <- 0
noPhormidium <- dat2[dat2$Genus != 'OLB12']
dat2 <- rbind(onlyPhormidium, noPhormidium)


dat2[(median <= 0.00029), Genus := "Other Genera "] #0.000199
dat2$Sample <- factor(dat2$Sample, levels = c(
  "Mat_Black",
  "Mat_Orange",
  "Tardigrade_Black",
  "Tardigrade_Orange",
  "Plectus_Black",
  "Plectus_Orange",
  "Eudorylaimus_Black",
  "Eudorylaimus_Orange"
))


#write.csv(dat2,'fororderingbac.csv')




dat2$Genus <- factor(dat2$Genus, levels = c(
  "Other Genera ", 
  "Heliimonas", 
  "Chryseobacterium", 
  "Rurimicrobium", 
  "Pseudoflavitalea", 
  "Larkinella", 
  "Sediminibacterium", 
  "Lewinella", 
  "Cytophaga", 
  "Flavihumibacter", 
  "Arcicella", 
  "Rudanella", 
  "Segetibacter", 
  "Edaphobaculum", 
  "Terrimonas", 
  "Hymenobacter", 
  "Spirosoma", 
  "Pedobacter", 
  "Ferruginibacter", 
  "Flavobacterium"
  
))


nopre = c(
  "Other Genera ", 
  expression(italic("Heliimonas")), 
  expression(italic( "Chryseobacterium")), 
  expression(italic( "Rurimicrobium")), 
  expression(italic("Pseudoflavitalea")), 
  expression(italic("Larkinella")), 
  expression(italic("Sediminibacterium")), 
  expression(italic( "Lewinella")), 
  expression(italic( "Cytophaga")), 
  expression(italic( "Flavihumibacter")), 
  expression(italic("Arcicella")), 
  expression(italic( "Rudanella")), 
  expression(italic("Segetibacter")), 
  expression(italic("Edaphobaculum")), 
  expression(italic("Terrimonas")), 
  expression(italic("Hymenobacter")), 
  expression(italic( "Spirosoma")), 
  expression(italic( "Pedobacter")), 
  expression(italic( "Ferruginibacter")), 
  expression(italic("Flavobacterium"))
)

#legend.text = element_text(face = "italic")


palette <- c( "#54555a","#70C3D7", "#DEEA44", "#DBB247","#6CE3E1","#8867DD", "#E3E0AE",   "#DBAD81", "#648EE7" , "#7AA56F", "#E4ACDE", "#DC4ADB", "#76EA9A", "#5AE5BF", "#7B376E", "#82D25E", "#DDC3BE", "#E44C90", "#61A6DA",
              "#D2E588", "#E4704C", "#6DEF4C", "#9F8ED2", "#D6818F", "#DC85DB", "#C2BEDF", "#843BE2", "#CDE4E4", "#ACE4C1", "#DEEA44" )
edes2 <- ggplot(dat2, aes(x = Sample, y = Abundance, fill = Genus)) + geom_bar( stat = "identity")  + theme_classic(15) + scale_fill_manual(values=palette,labels =nopre) + theme(legend.text.align = 0)
edes2 <- edes2+ geom_signif(comparisons = list(c("Mat_Black", "Mat_Orange")), annotation="b", tip_length = 0, y_position = c(0.3) ) + geom_signif(comparisons = list(c("Tardigrade_Black", "Plectus_Orange")), tip_length = 0, annotation="a", y_position = c(0.6))+ geom_signif(comparisons = list(c("Eudorylaimus_Black", "Eudorylaimus_Orange")), tip_length = 0,  annotation="b", y_position = c(0.3) ) 
onlybac <- edes2 + theme(axis.title.x=element_blank(),axis.text.x = element_text(color="black", margin = margin(t = 2)),axis.text.y = element_text(color="black")  )  + ylab("Relative Abundance") + labs(fill='Bacteroidota Genera') +  scale_y_continuous(limits = c(0, 0.65), expand = c(0,0)) +scale_x_discrete(labels = c('Black Mat','Orange Mat','Tardigrade','Tardigrade','Plectus','Plectus','Eudorylaimus','Eudorylaimus'))
myPalette <- c ( "black", "#ff7800", "black", "#ff7800","black", "#ff7800","black", "#ff7800")
onlybac <- onlybac + theme(axis.text.x = element_text(colour=myPalette))
onlybac <- onlybac + theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 25, hjust = 1)) + guides(fill=guide_legend(ncol=2,reverse = TRUE))
onlybac
#onlybac <- onlybac + ylab(expression(atop("Relative Abundance", paste("By Bacteroidota Genus"))))
onlybacNoL <- onlybac + theme(legend.position = "none") 
my_legend <- get_legend(onlybac)
BacLeg<- as_ggplot(my_legend)



#graph per animal, genus now, only protoeio
ph4<- PhOnlyClean10
ph4 <-prune_samples(sample_sums(ph4)>=1, ph4)
ps4<- transform_sample_counts(ph4, function(x) x / sum(x))
ps <- tax_glom(ps4, "Family")
ps0 <- transform_sample_counts(ps, function(x) x / sum(x))
ps1 <- merge_samples(ps0, "AnimalColor")
#account for uneven numbersZ
ps2 <- transform_sample_counts(ps1, function(x) x / sum(x))
ps2 <- subset_taxa(ps2, Phylum=="Proteobacteria")
dat2 <- data.table(psmelt(ps2))
# convert Phylum to a character vector from a factor because R
dat2$Family <- as.character(dat2$Family)
# group dataframe by Phylum, calculate median rel. abundance
dat2[, median := median(Abundance, na.rm = TRUE), 
     by = "Family"]
# Change name to remainder of Phylum less than 1%
dat2[(median <= 0.0010), Family := "Other Familes "] #0.0008
dat2$Sample <- factor(dat2$Sample, levels = c(
  "Mat_Black",
  "Mat_Orange",
  "Tardigrade_Black",
  "Tardigrade_Orange",
  "Plectus_Black",
  "Plectus_Orange",
  "Eudorylaimus_Black",
  "Eudorylaimus_Orange"
))



#write.csv(dat2,'fororderingpro.csv')


dat2$Family <- factor(dat2$Family, levels = c(
  "Other Familes ", 
  "Azospirillaceae", 
  "Alcaligenaceae", 
  "Pseudomonadaceae", 
  "Rickettsiaceae", 
  "Sutterellaceae", 
  "Devosiaceae", 
  "Rhizobiaceae", 
  "Oxalobacteraceae", 
  "Nitrosomonadaceae", 
  "Rhodocyclaceae", 
  "Xanthomonadaceae", 
  "Rhodanobacteraceae", 
  "Acetobacteraceae", 
  "Caulobacteraceae", 
  "Rhodobacteraceae", 
  "Sphingomonadaceae", 
  "Comamonadaceae"
))

palette <- c( "#54555a", "#E5E4BB", "#68EAA0", "#60B79B","#fdff06", "#ABAB9A" ,"#8AA662", "#DC4ADB", "#833AE2", "#DCAE41" ,"#D5E77D", "#7A4282" ,"#E6704B", "#DAAADC", "#BCE7DE" ,"#7E717D", "#DCA383",
              "#aca0dc", "#66EDDA" ,"#6DEF4C", "#64A5DA", "#8690DF", "#B7C5E0", "#D67D8F", "#B1E9AC", "#80D360", "#8968E1", "#DECA7E", "#DEEB40", "#69D3E4")
edes2 <- ggplot(dat2, aes(x = Sample, y = Abundance, fill = Family)) + geom_bar( stat = "identity")  + theme_classic(15) + scale_fill_manual(values=palette) 
edes2 <- edes2+ geom_signif(comparisons = list(c("Mat_Black", "Plectus_Orange")), tip_length = 0, annotation="b", y_position = c(0.4) ) + geom_signif(comparisons = list(c("Eudorylaimus_Black", "Eudorylaimus_Orange")), annotation="a", tip_length = 0, y_position = c(0.75))
onlypro <- edes2 + theme(axis.title.x=element_blank(),axis.text.x = element_text(color="black", margin = margin(t = 2)),axis.text.y = element_text(color="black")  )  + ylab("Relative Abundance") + labs(fill='Proteobacteria Families') +  scale_y_continuous(limits = c(0, 0.8), expand = c(0,0)) +scale_x_discrete(labels = c('Black Mat','Orange Mat','Tardigrade','Tardigrade','Plectus','Plectus','Eudorylaimus','Eudorylaimus'))
myPalette <- c ( "black", "#ff7800", "black", "#ff7800","black", "#ff7800","black", "#ff7800")
onlypro <- onlypro + theme(axis.text.x = element_text(colour=myPalette))
onlypro <- onlypro + theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 25, hjust = 1)) +guides(fill=guide_legend(ncol=2,reverse = TRUE))
onlypro
onlyproNoL <- onlypro + theme(legend.position = "none") 
my_legend <- get_legend(onlypro)
ProLeg<- as_ggplot(my_legend)              
#E44B91

#make into one big graph, good version
rightright <- ggarrange(CyanoLeg, BacLeg, ProLeg,  ncol = 1, nrow = 3)
right <- ggarrange(onlycyanoNoL, onlybacNoL, onlyproNoL,   labels = c("b.", "c.", "d."),  ncol = 1, nrow = 3)
Figure3 <- ggarrange(allphyla, right,rightright,  labels = c("a.",  "", ""), ncol = 3, nrow = 1, widths = c(1.5, 1, 0.7))
Figure3






###### Figure 4######


fonts()
font_import()

PhOnlyClean10
ps0 <- PhOnlyClean10
ps0<- transform_sample_counts(ps0, function(x) x / sum(x))
ps0 <- tax_glom(ps0, "Genus")
ps0 <- transform_sample_counts(ps0, function(x) x / sum(x))

OTU1 = as(otu_table(ps0), "matrix")
#write.csv(OTU1,'export.csv')

Modify in excel to match their "unique" formatting
#https://huttenhower.sph.harvard.edu/galaxy/
  
  
LDAforR <- read.csv("~/Desktop/FinalPipelineNoUnassigned/LDAforr.csv")
LDAforR <- LDAforR
LDAforR$Feature<- factor(LDAforR$Feature,levels = c(

  
  "Bacteroidota Bacteroidia Flavobacteriales Weeksellaceae Chryseobacterium Chryseobacterium (h)",
  "Bacteroidota Bacteroidia Flavobacteriales Weeksellaceae (i)",
  "Proteobacteria Gammaproteobacteria Burkholderiales Comamonadaceae Variovorax Variovorax (a8)",
  "Bacteroidota Bacteroidia Flavobacteriales Flavobacteriaceae Flavobacterium Flavobacterium (f)",
  "Bacteroidota Bacteroidia Flavobacteriales Flavobacteriaceae (g)",
  "Bacteroidota Bacteroidia Flavobacteriales (j)",
  "Bacteroidota Bacteroidia Chitinophagales Chitinophagaceae (a)",
  "Bacteroidota Bacteroidia Chitinophagales (b)",
  
  
  "Bacteroidota Bacteroidia Cytophagales Spirosomaceae Larkinella Larkinella (c)",
  "Bacteroidota Bacteroidia Cytophagales Spirosomaceae (d)",
  "Bacteroidota Bacteroidia Cytophagales (e) ",
 
  

  
  
  "Planctomycetota Planctomycetes Gemmatales Gemmataceae (w)",
  "Proteobacteria Alphaproteobacteria Rickettsiales (a5)",
  "Planctomycetota Planctomycetes Gemmatales (x)",
  "Planctomycetota Planctomycetes Gemmatales Gemmataceae Fimbriiglobus Fimbriiglobus (v)",
  "Planctomycetota Planctomycetes     ",
  "Planctomycetota      ",
  "Proteobacteria Gammaproteobacteria Legionellales (b4)",
  "Proteobacteria Gammaproteobacteria Legionellales Legionellaceae Legionella Legionella (b2)",
  "Acidobacteriota      ",
  "Acidobacteriota Blastocatellia     ",
  "Proteobacteria Alphaproteobacteria Rhizobiales (a2)",
  "Proteobacteria Alphaproteobacteria Rhizobiales Rhizobiaceae (a1)",
  "Proteobacteria Gammaproteobacteria Legionellales Legionellaceae (b2)",
  "Proteobacteria Alphaproteobacteria Paracaedibacterales (a0)",
  "Proteobacteria Alphaproteobacteria Paracaedibacterales Paracaedibacteraceae Candidatus Candidatus (y)",
  "Proteobacteria Alphaproteobacteria Paracaedibacterales Paracaedibacteraceae (z)",
  "Proteobacteria Gammaproteobacteria Gammaproteobacteria Other (a9)",
  "Proteobacteria Gammaproteobacteria Gammaproteobacteria (b1)",
  "Proteobacteria Gammaproteobacteria Gammaproteobacteria Other Other Other (b)",
  "Proteobacteria Gammaproteobacteria     ",
  "Proteobacteria      ",
  
  
  "Proteobacteria Alphaproteobacteria Rhodobacterales Rhodobacteraceae (a3)",
  "Proteobacteria Alphaproteobacteria Rhodobacterales (a4)",
  "Cyanobacteria Cyanobacteriia Oxyphotobacteria (u)",
  "Cyanobacteria Cyanobacteriia Oxyphotobacteria Other (t)",
  "Cyanobacteria Cyanobacteriia Oxyphotobacteria Other Other Other (s)",
  "Cyanobacteria Cyanobacteriia Leptolyngbyales Leptolyngbyaceae (q)",
  "Cyanobacteria Cyanobacteriia Leptolyngbyales Leptolyngbyaceae Phormidium Phormidium (p)",
  "Proteobacteria Alphaproteobacteria Sphingomonadales Sphingomonadaceae (a6)",
  "Proteobacteria Alphaproteobacteria Sphingomonadales (a7)",
  "Cyanobacteria Cyanobacteriia Leptolyngbyales (r)",
  "Cyanobacteria Cyanobacteriia Cyanobacteriales Other Other Other (m)",
  "Cyanobacteria Cyanobacteriia Cyanobacteriales Other (n)",
  "Cyanobacteria Cyanobacteriia Cyanobacteriales Nostocaceae Nostoc Nostoc (k)",
  "Cyanobacteria Cyanobacteriia Cyanobacteriales Nostocaceae (l)",
  "Cyanobacteria Cyanobacteriia Cyanobacteriales (o)",
  "Cyanobacteria Cyanobacteriia     ",
  "Cyanobacteria      ",
  "Phylum Class Order Family Genus"
  
))


test = c(

  
  
  
  expression(paste("Bacteroidota    Bacteroidia         Flavobacteriales    Weeksellaceae        ",italic("Chryseobacterium"))),
  "Bacteroidota    Bacteroidia         Flavobacteriales    Weeksellaceae",
  expression(paste("Proteobacteria  Gammaproteobacteria Burkholderiales     Comamonadaceae       ",italic("Variovorax"))),
  expression(paste("Bacteroidota    Bacteroidia         Flavobacteriales    Flavobacteriaceae    ",italic("Flavobacterium"))),
  "Bacteroidota    Bacteroidia         Flavobacteriales    Flavobacteriaceae",
  "Bacteroidota    Bacteroidia         Flavobacteriales",
  "Bacteroidota    Bacteroidia         Chitinophagales     Chitinophagaceae",
  "Bacteroidota    Bacteroidia         Chitinophagales",
  
  
  expression(paste("Bacteroidota    Bacteroidia         Cytophagales        Spirosomaceae        ",italic("Larkinella"))),
  "Bacteroidota    Bacteroidia         Cytophagales        Spirosomaceae",
  "Bacteroidota    Bacteroidia         Cytophagales",
  
  
 
  
  
  "Planctomycetota Planctomycetes      Gemmatales          Gemmataceae",
  "Proteobacteria  Alphaproteobacteria Rickettsiales",
  "Planctomycetota Planctomycetes      Gemmatales",
  expression(paste("Planctomycetota Planctomycetes      Gemmatales          Gemmataceae         ",italic("Fimbriiglobus"))),
  "Planctomycetota Planctomycetes     ",
  "Planctomycetota      ",
  "Proteobacteria  Gammaproteobacteria Legionellales",
  expression(paste("Proteobacteria  Gammaproteobacteria Legionellales       Legionellaceae      ",italic("Legionella"))),
  "Acidobacteriota      ",
  "Acidobacteriota Blastocatellia     ",
  "Proteobacteria  Alphaproteobacteria Rhizobiales",
  "Proteobacteria  Alphaproteobacteria Rhizobiales         Rhizobiaceae",
  "Proteobacteria  Gammaproteobacteria Legionellales       Legionellaceae",
  "Proteobacteria  Alphaproteobacteria Paracaedibacterales",
  expression(paste("Proteobacteria  Alphaproteobacteria Paracaedibacterales Paracaedibacteraceae ",italic("Candidatus"))),
  "Proteobacteria  Alphaproteobacteria Paracaedibacterales Paracaedibacteraceae",
  "Proteobacteria  Gammaproteobacteria Gammaproteobacteria Other",
  "Proteobacteria  Gammaproteobacteria Gammaproteobacteria",
  expression(paste("Proteobacteria  Gammaproteobacteria Gammaproteobacteria Other                ",italic("Other"))),
  "Proteobacteria  Gammaproteobacteria     ",
  "Proteobacteria      ",
  
  
  "Proteobacteria  Alphaproteobacteria Rhodobacterales     Rhodobacteraceae",
  "Proteobacteria  Alphaproteobacteria Rhodobacterales",
  "Cyanobacteria   Cyanobacteriia      Oxyphotobacteria",
  "Cyanobacteria   Cyanobacteriia      Oxyphotobacteria    Other",
  expression(paste("Cyanobacteria   Cyanobacteriia      Oxyphotobacteria    Other                ",italic("Other"))),
  "Cyanobacteria   Cyanobacteriia      Leptolyngbyales     Leptolyngbyaceae",
  expression(paste("Cyanobacteria   Cyanobacteriia      Leptolyngbyales     Leptolyngbyaceae     ",italic("Phormidium"))),
  "Proteobacteria  Alphaproteobacteria Sphingomonadales    Sphingomonadaceae",
  "Proteobacteria  Alphaproteobacteria Sphingomonadales",
  "Cyanobacteria   Cyanobacteriia      Leptolyngbyales",
  expression(paste("Cyanobacteria   Cyanobacteriia      Cyanobacteriales    Other                ", italic("Other"))),
  "Cyanobacteria   Cyanobacteriia      Cyanobacteriales    Other",
  expression(paste("Cyanobacteria   Cyanobacteriia      Cyanobacteriales    Nostocaceae          ", italic("Nostoc"))),
  "Cyanobacteria   Cyanobacteriia      Cyanobacteriales    Nostocaceae",
  "Cyanobacteria   Cyanobacteriia      Cyanobacteriales",
  "Cyanobacteria   Cyanobacteriia",
  "Cyanobacteria",
  expression(paste("Phylum          Class               Order               Family              Genus"))
  
)


LDAforR$HostID<- factor(LDAforR$HostID,levels = c(
  "Mat",
  "Eudorylaimus",
  "Plectus",
  "Tardigrade"
  ))

fig4a <- ggplot(LDAforR, aes( y=LDA, x=Feature, fill= HostID)) + geom_bar(position="dodge", stat="identity") + theme_classic(15)+theme(legend.text = element_text(size=10), legend.title = element_text(size=15), axis.text.x = element_text(angle = 0)) +  scale_y_reverse() + coord_flip(ylim = c(5.4,4),expand = c(0,0)) + scale_fill_manual(values=c("#CED4FB","#EFCDCD","#D5E5D2","#EDD4F0")) + scale_x_discrete(labels =test, position = "top")
fig4a <- fig4a + theme(axis.title.y=element_blank(),axis.text.x = element_text(color="black", margin = margin(t = 2)),axis.text.y = element_text(color="black",family = "Menlo",size=9)  ) + ylab("LDA Effect Size Score (log scale)") + theme(legend.position="bottom")
fig4b <- fig4a + geom_text(aes(label = Delim,y=4.07))

fig4b 

############ Ordination Based Figures###########



#Using either Bacterialcommunity or Eukcommunity phlyoseq object


#Make Relative Abundance
RELPhOnlyClean10 <- transform_sample_counts(Bacterialcommunity, function(x) x / sum(x))

#CreateBray distance matri
wunifrac_dist2 = phyloseq::distance(RELPhOnlyClean10, method="bray", weighted=F)
#Ordinate
ordination1 = ordinate(RELPhOnlyClean10, method="NMDS", distance=wunifrac_dist2)

#Plot 1
allGroupsColors<- c("#f92d30", "#237b27", "#af39af","orange")
plotbeta2 <- plot_ordination(RELPhOnlyClean10, ordination1, color="Animal")  + xlab("NMDS 1")+ ylab("NMDS 2") + theme_classic(30) +stat_ellipse( level = 0.45)+ labs(color="Microinvertebrate") + theme(legend.position="right", axis.text.x = element_text(color="black"), axis.text.y = element_text(color="black") )+ scale_color_manual(values = allGroupsColors) 
my_legend2 <- get_legend(plotbeta2)
plotbeta2
plotbeta2 <-plotbeta2 +theme(legend.position = "none")  

#Plot 2
plotbeta1 <- plot_ordination(RELPhOnlyClean10, ordination1, color="Color") + theme_classic(30)  + labs(color="Mat Type") + theme(legend.position="right", axis.text.x = element_text(color="black"), axis.text.y = element_text(color="black") )
allGroupsColors<- c("black", "orange")
plotbeta1 <- plotbeta1 + xlab("NMDS 1")+ ylab("NMDS 2") +stat_ellipse( level = 0.95) + scale_color_manual(values = allGroupsColors) 
plotbeta1

my_legend1 <- get_legend(plotbeta1)
plotbeta1 <-plotbeta1 +theme(legend.position = "none") 

#Combine plots
FigureSI <- ggarrange(plotbeta1, plotbeta2,  labels = c("a.",  "b."), ncol = 2, nrow = 1, widths = c(1, 1))
FigureSIL <- ggarrange(my_legend1, my_legend2, ncol = 2, nrow = 1)
FigureSIf <- ggarrange(FigureSI, FigureSIL, ncol = 1, nrow = 2, heights = c(1, 0.3))
FigureSIf
